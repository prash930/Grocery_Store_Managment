create database if not exists Grocery_Store_Management ;
use Grocery_Store_Management;

-- 5 rows 
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);


-- 5 rows 
-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);


-- 10 rows 
-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);


-- 200 records 
-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);


-- 50 records 
-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 300 records
-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);
select * from order_details;


#How many products exist in each category?
SELECT 
    c.cat_name,
    COUNT(p.prod_id) AS product_count
FROM products p
JOIN categories c ON p.cat_id = c.cat_id
GROUP BY c.cat_id, c.cat_name
ORDER BY product_count DESC;


#What is the average price of products by category?
SELECT 
    c.cat_name,
    ROUND(AVG(p.price), 2) AS average_price
FROM products p
JOIN categories c ON p.cat_id = c.cat_id
GROUP BY c.cat_id, c.cat_name
ORDER BY average_price DESC;



#Which products have the highest total sales volume (by quantity)?
SELECT 
    p.prod_id,
    p.prod_name,
    SUM(od.quantity) AS total_quantity_sold
FROM order_details od
JOIN products p ON od.prod_id = p.prod_id
GROUP BY p.prod_id, p.prod_name
ORDER BY total_quantity_sold DESC
LIMIT 10;


#What is the total revenue generated by each product?
SELECT 
    p.prod_id,
    p.prod_name,
    ROUND(SUM(od.total_price), 2) AS total_revenue
FROM order_details od
JOIN products p ON od.prod_id = p.prod_id
GROUP BY p.prod_id, p.prod_name
ORDER BY total_revenue DESC;


#How do product sales vary by category and supplier?
SELECT 
    c.cat_name,
    s.sup_name,
    COUNT(DISTINCT p.prod_id) AS product_count,
    SUM(od.quantity) AS total_quantity_sold,
    ROUND(SUM(od.total_price), 2) AS total_revenue
FROM order_details od
JOIN products p ON od.prod_id = p.prod_id
JOIN categories c ON p.cat_id = c.cat_id
JOIN supplier s ON p.sup_id = s.sup_id
GROUP BY c.cat_id, c.cat_name, s.sup_id, s.sup_name
ORDER BY total_revenue DESC;



#How many orders have been placed in total?
SELECT COUNT(*) AS total_orders FROM orders;


#What is the average value per order?
SELECT 
    ROUND(AVG(order_total), 2) AS average_order_value
FROM (
    SELECT 
        o.ord_id,
        SUM(od.total_price) AS order_total
    FROM orders o
    JOIN order_details od ON o.ord_id = od.ord_id
    GROUP BY o.ord_id
) AS order_totals;

# On which dates were the most orders placed?

SELECT 
    order_date,
    COUNT(*) AS order_count
FROM orders
GROUP BY order_date
ORDER BY order_count DESC
LIMIT 10;


#What are the monthly trends in order volume and revenue?
SELECT 
    YEAR(STR_TO_DATE(order_date, '%Y-%m-%d')) AS year,
    MONTH(STR_TO_DATE(order_date, '%Y-%m-%d')) AS month,
    COUNT(DISTINCT o.ord_id) AS order_count,
    ROUND(SUM(od.total_price), 2) AS monthly_revenue
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY YEAR(STR_TO_DATE(order_date, '%Y-%m-%d')), MONTH(STR_TO_DATE(order_date, '%Y-%m-%d'))
ORDER BY year, month;


#How do order patterns vary across weekdays and weekends?
SELECT 
    case
        WHEN DAYOFWEEK(STR_TO_DATE(order_date, '%Y-%m-%d')) IN (1, 7) THEN 'Weekend'
        ELSE 'Weekday'
    END AS day_type,
    COUNT(*) AS order_count,
    ROUND(SUM(od.total_price), 2) AS total_revenue,
    ROUND(AVG(od.total_price), 2) AS avg_order_value
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY day_type;
#How many suppliers are there in the database?
SELECT COUNT(*) AS total_suppliers FROM supplier;
# Which supplier provides the most products?
SELECT 
    s.sup_id,
    s.sup_name,
    COUNT(p.prod_id) AS product_count
FROM supplier s
LEFT JOIN products p ON s.sup_id = p.sup_id
GROUP BY s.sup_id, s.sup_name
ORDER BY product_count DESC;


#What is the average price of products from each supplier?
SELECT 
    s.sup_id,
    s.sup_name,
    ROUND(AVG(p.price), 2) AS average_product_price,
    COUNT(p.prod_id) AS product_count
FROM supplier s
LEFT JOIN products p ON s.sup_id = p.sup_id
GROUP BY s.sup_id, s.sup_name
ORDER BY average_product_price DESC;


# Which suppliers contribute the most to total product sales (by revenue)?
SELECT 
    s.sup_id,
    s.sup_name,
    ROUND(SUM(od.total_price), 2) AS total_revenue,
    SUM(od.quantity) AS total_quantity_sold,
    COUNT(DISTINCT o.ord_id) AS orders_containing_products
FROM supplier s
JOIN products p ON s.sup_id = p.sup_id
JOIN order_details od ON p.prod_id = od.prod_id
JOIN orders o ON od.ord_id = o.ord_id
GROUP BY s.sup_id, s.sup_name
ORDER BY total_revenue DESC;


#Top 5 Products by Revenue in Each Category
WITH ranked_products AS (
    SELECT 
        c.cat_name,
        p.prod_name,
        ROUND(SUM(od.total_price), 2) AS total_revenue,
        RANK() OVER (PARTITION BY c.cat_id ORDER BY SUM(od.total_price) DESC) as rank_in_category
    FROM order_details od
    JOIN products p ON od.prod_id = p.prod_id
    JOIN categories c ON p.cat_id = c.cat_id
    GROUP BY c.cat_id, c.cat_name, p.prod_id, p.prod_name
)
SELECT 
    cat_name,
    prod_name,
    total_revenue
FROM ranked_products
WHERE rank_in_category <= 5
ORDER BY cat_name, rank_in_category;



#Monthly Growth Rate Analysis
WITH monthly_sales AS (
    SELECT 
        YEAR(STR_TO_DATE(order_date, '%Y-%m-%d')) AS year,
        MONTH(STR_TO_DATE(order_date, '%Y-%m-%d')) AS month,
        SUM(od.total_price) AS monthly_revenue
    FROM orders o
    JOIN order_details od ON o.ord_id = od.ord_id
    GROUP BY YEAR(STR_TO_DATE(order_date, '%Y-%m-%d')), MONTH(STR_TO_DATE(order_date, '%Y-%m-%d'))
)
SELECT 
    year,
    month,
    monthly_revenue,
    LAG(monthly_revenue) OVER (ORDER BY year, month) AS previous_month_revenue,
    ROUND(((monthly_revenue - LAG(monthly_revenue) OVER (ORDER BY year, month)) / 
          LAG(monthly_revenue) OVER (ORDER BY year, month)) * 100, 2) AS growth_rate_percent
FROM monthly_sales
ORDER BY year, month;